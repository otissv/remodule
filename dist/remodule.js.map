{"version":3,"sources":["../src/lib/remodule.js"],"names":["remodule","reduxMethods","register","method","fn","Object","keys","reduce","previousObj","currentKey","Class","typeName","str","capitalize","toUpperCase","substr","length","initial","initialState","currentModule","initialActions","previous","mod","map","item","key","type","payload","initialReducers","state","action","console","log","prev","actions","current","reducers","moduleName","reducer","setModuleName","trim","modType","store","middleware","extendReducers","mapStateToProps"],"mappings":"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","file":"remodule.js","sourcesContent":["import camel from 'to-camel-case';\nimport { compose, createStore } from 'redux';\n\nfunction reduxMethods (register, method) {\n  return function (fn) {\n    return Object.keys(register).reduce((previousObj, currentKey) => {\n      let Class =\n        currentKey !== 'initialState' && currentKey !== 'register'\n          ? new register[currentKey]()\n          : {};\n\n      if (Class[method] == null) return previousObj;\n\n      return fn({ previousObj, currentKey, method, Class });\n    }, {});\n  };\n}\n\nfunction typeName (str) {\n  return `set${str}`;\n}\n\nfunction capitalize (str) {\n  return `${str[0].toUpperCase()}${str.substr(1, str.length - 1)}`;\n}\n\nexport default function remodule (register, { initial }) {\n  const initialState = register.reduce(\n    (previousObj, currentModule) => ({\n      ...previousObj,\n      [currentModule.register]: currentModule.initialState\n    }),\n    {}\n  );\n\n  const initialActions = Object.keys(initialState)\n    .reduce(\n      (previous, mod) => [\n        ...previous,\n        capitalize(mod),\n        ...Object.keys(initialState[mod]).map(\n          item => `${capitalize(mod)}${capitalize(item)}`\n        )\n      ],\n      []\n    )\n    .reduce(\n      (previous, key) => ({\n        ...previous,\n        [typeName(key)]: payload => ({ type: typeName(key), payload })\n      }),\n      {}\n    );\n\n  const initialReducers = Object.keys(initialState).reduce(\n    (previous, mod) => ({\n      ...previous,\n      [typeName(capitalize(mod))]: (state, action) => {\n        console.log(state);\n        return {\n          ...state,\n          ...action.payload\n        };\n      },\n\n      ...Object.keys(initialState[mod]).reduce((prev, key) => {\n        const type = typeName(`${capitalize(mod)}${capitalize(key)}`);\n\n        return {\n          ...prev,\n          [type]: (state, action) => {\n            console.log(action.type, action.payload);\n            if (type !== action.type) return state[mod];\n            return typeof action.payload === 'object'\n              ? { ...state, [key]: { ...action.payload } }\n              : { ...state, [key]: action.payload };\n          }\n        };\n      }, {})\n    }),\n    {}\n  );\n\n  const actions = register.reduce((previous, current) => {\n    return {\n      ...previous,\n      ...reduxMethods(\n        current,\n        'action'\n      )(({ previousObj, currentKey, method, Class }) => {\n        return {\n          ...previousObj,\n          [camel(currentKey)]: Class[method]\n        };\n      })\n    };\n  }, initial ? initialActions : {});\n\n  const reducers = (state = initialState, action) => {\n    return register.reduce((previous, currentModule) => {\n      const moduleName = currentModule.register;\n\n      const reducer = (state, action) => {\n        const actions = reduxMethods(\n          currentModule,\n          'reducer'\n        )(({ previousObj, currentKey, method, Class }) => {\n          return {\n            ...previousObj,\n            [camel(currentKey)]: (state, action) =>\n              action.type === currentKey && Class[method](state, action)\n          };\n        });\n        const type = camel(action.type);\n        const setModuleName = `set${capitalize(moduleName)}`.trim();\n\n        if (actions[type] == null) {\n          const modType =\n            type.substr(0, `set${moduleName}`.length) === setModuleName &&\n            type !== setModuleName\n              ? camel(type.substr(setModuleName.length, type.length - 1))\n              : camel(type.substr(3, type.length - 1));\n\n          if (\n            state[modType] ||\n            (state[modType] === '' && initialReducers[action.type])\n          ) {\n            return initialReducers[action.type](state, action);\n          } else if (moduleName == modType) {\n            return initialReducers[action.type](state, action);\n          } else {\n            return state;\n          }\n        } else {\n          return actions[type](state, action);\n        }\n      };\n\n      return {\n        ...previous,\n        [moduleName]: {\n          ...previous[moduleName],\n          ...reducer(state[moduleName], action)\n        }\n      };\n    }, {});\n  };\n\n  const store = ({ middleware, extendReducers = {} }) =>\n    compose(...middleware)(createStore)(reducers);\n\n  const mapStateToProps = state => {\n    return register.reduce((previousObj, currentModule) => {\n      const moduleName = currentModule.register;\n\n      return {\n        ...previousObj,\n        initialState,\n        ...Object.keys(\n          currentModule.initialState\n        ).reduce((previous, currentKey) => {\n          return {\n            ...previous,\n            [currentKey]: state[moduleName][currentKey]\n          };\n        }, {})\n      };\n    }, {});\n  };\n\n  return {\n    actions,\n    initialState,\n    mapStateToProps,\n    reducers,\n    store\n  };\n}\n"]}